apiVersion: v1
kind: ServiceAccount
metadata:
  name: seldon
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: seldon-local
  namespace: default
rules:
- apiGroups:
  - '*'
  resources:
  - deployments
  - services
  - horizontalpodautoscalers
  verbs:
  - '*'
- apiGroups:
  - machinelearning.seldon.io
  resources:
  - '*'
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: seldon
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: seldon-local
subjects:
- kind: ServiceAccount
  name: seldon
  namespace: default
---
apiVersion: v1
data:
  ping_local.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_local.sh" $1 || exit_status=$?
    "$script_dir/ping_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_master.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
kind: ConfigMap
metadata:
  labels:
    app: redis
    release: seldon-core
  name: seldon-core-redis-health
---
apiVersion: v1
data:
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  redis.conf: |-
    # User-supplied configuration:
    # maxmemory-policy volatile-lru
  replica.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
kind: ConfigMap
metadata:
  labels:
    app: redis
    release: seldon-core
  name: seldon-core-redis
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis
    release: seldon-core
  name: seldon-core-redis-master
spec:
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    release: seldon-core
    role: master
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: seldon-apiserver-container-app
    app.kubernetes.io/component: seldon-core-apiserver
    app.kubernetes.io/name: seldon-core
  name: seldon-core-seldon-apiserver
spec:
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 8080
  - name: grpc
    port: 5000
    protocol: TCP
    targetPort: 5000
  selector:
    app: seldon-apiserver-container-app
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    app: seldon-apiserver-container-app
    app.kubernetes.io/component: seldon-core-apiserver
    app.kubernetes.io/name: seldon-core
    component: seldon-core
    release: seldon-core
  name: seldon-core-seldon-apiserver
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: seldon-apiserver-container-app
      app.kubernetes.io/component: seldon-core-apiserver
      app.kubernetes.io/name: seldon-core
      chart: seldon-core-0.2.8-SNAPSHOT
      component: seldon-core
      heritage: Tiller
      release: seldon-core
  template:
    metadata:
      annotations:
        prometheus.io/path: /prometheus
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: seldon-apiserver-container-app
        app.kubernetes.io/component: seldon-core-apiserver
        app.kubernetes.io/name: seldon-core
        chart: seldon-core-0.2.8-SNAPSHOT
        component: seldon-core
        heritage: Tiller
        release: seldon-core
    spec:
      containers:
      - env:
        - name: SELDON_ENGINE_KAFKA_SERVER
          value: kafka:9092
        - name: SELDON_CLUSTER_MANAGER_REDIS_HOST
          value: seldon-core-redis-master
        - name: ENGINE_SERVER_GRPC_PORT
          value: "5001"
        - name: ENGINE_SERVER_PORT
          value: "8000"
        - name: SELDON_SINGLE_NAMESPACE
          value: "true"
        - name: SELDON_CLUSTER_MANAGER_POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: seldonio/apife:0.2.8-SNAPSHOT
        imagePullPolicy: IfNotPresent
        name: seldon-apiserver-container
        ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 5000
          protocol: TCP
        securityContext:
          runAsUser: 8888
        volumeMounts:
        - mountPath: /etc/podinfo
          name: podinfo
          readOnly: false
      dnsPolicy: ClusterFirst
      serviceAccountName: seldon
      terminationGracePeriodSeconds: 30
      volumes:
      - downwardAPI:
          items:
          - fieldRef:
              fieldPath: metadata.annotations
            path: annotations
        name: podinfo
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: seldon-cluster-manager-server
    app.kubernetes.io/component: seldon-core-operator
    app.kubernetes.io/name: seldon-core
    component: seldon-core
    release: seldon-core
  name: seldon-core-seldon-cluster-manager
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: seldon-cluster-manager-server
      app.kubernetes.io/component: seldon-core-operator
      app.kubernetes.io/name: seldon-core
      chart: seldon-core-0.2.8-SNAPSHOT
      component: seldon-core
      heritage: Tiller
      release: seldon-core
  template:
    metadata:
      labels:
        app: seldon-cluster-manager-server
        app.kubernetes.io/component: seldon-core-operator
        app.kubernetes.io/name: seldon-core
        chart: seldon-core-0.2.8-SNAPSHOT
        component: seldon-core
        heritage: Tiller
        release: seldon-core
    spec:
      containers:
      - env:
        - name: JAVA_OPTS
          value: ""
        - name: SPRING_OPTS
          value: ""
        - name: SELDON_CLUSTER_MANAGER_REDIS_HOST
          value: seldon-core-redis-master
        - name: ENGINE_CONTAINER_IMAGE_AND_VERSION
          value: seldonio/engine:0.2.8-SNAPSHOT
        - name: ENGINE_CONTAINER_IMAGE_PULL_POLICY
          value: IfNotPresent
        - name: ENGINE_CONTAINER_SERVICE_ACCOUNT_NAME
          value: default
        - name: SELDON_CLUSTER_MANAGER_SINGLE_NAMESPACE
          value: "true"
        - name: ENGINE_CONTAINER_USER
          value: "8888"
        - name: PREDICTIVE_UNIT_SERVICE_PORT
          value: "9000"
        - name: ENGINE_SERVER_GRPC_PORT
          value: "5001"
        - name: ENGINE_SERVER_PORT
          value: "8000"
        - name: ENGINE_PROMETHEUS_PATH
          value: prometheus
        - name: SELDON_CLUSTER_MANAGER_POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: seldonio/cluster-manager:0.2.8-SNAPSHOT
        imagePullPolicy: IfNotPresent
        name: seldon-cluster-manager-container
        ports:
        - containerPort: 8080
          protocol: TCP
        securityContext:
          runAsUser: 8888
      serviceAccountName: seldon
      terminationGracePeriodSeconds: 1
---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  labels:
    app: redis
    release: seldon-core
  name: seldon-core-redis-master
spec:
  selector:
    matchLabels:
      app: redis
      release: seldon-core
      role: master
  serviceName: seldon-core-redis-master
  template:
    metadata:
      annotations:
        checksum/configmap: aead2d6a18cc38d22699f84e8aaa7dc1d644799ab496ebdbdc73e62035a6965a
        checksum/health: 48128c61c89b4b2f1db849f18807fca483a33e78130035e22ced2232edc8f856
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      labels:
        app: redis
        chart: redis-6.4.5
        release: seldon-core
        role: master
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - |
          if [[ -n $REDIS_PASSWORD_FILE ]]; then
            password_aux=`cat ${REDIS_PASSWORD_FILE}`
            export REDIS_PASSWORD=$password_aux
          fi
          ARGS=("--port" "${REDIS_PORT}")
          ARGS+=("--protected-mode" "no")
          ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
          ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
          /run.sh ${ARGS[@]}
        env:
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        - name: REDIS_PORT
          value: "6379"
        image: docker.io/bitnami/redis:4.0.14
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_local.sh 5
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        name: seldon-core-redis
        ports:
        - containerPort: 6379
          name: redis
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_local.sh 5
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources: null
        volumeMounts:
        - mountPath: /health
          name: health
        - mountPath: /data
          name: redis-data
          subPath: null
        - mountPath: /opt/bitnami/redis/etc
          name: config
      serviceAccountName: default
      volumes:
      - configMap:
          defaultMode: 493
          name: seldon-core-redis-health
        name: health
      - configMap:
          name: seldon-core-redis
        name: config
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        app: redis
        component: master
        heritage: Tiller
        release: seldon-core
      name: redis-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
